# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    Twig\CacheExtension\CacheProviderInterface:
        class: Twig\CacheExtension\CacheProvider\PsrCacheAdapter

    Twig\CacheExtension\CacheStrategyInterface:
        class: Twig\CacheExtension\CacheStrategy\LifetimeCacheStrategy

    Twig\CacheExtension\Extension:
        tags:
            - { name: twig.extension }

    App\EventListener\LoginListener:
        tags:
            - { name: kernel.event_listener, event: security.interactive_login }

    # App\EventListener\UserOnlineAndVisitedListener:
    #     tags:
    #         - { name: kernel.event_listener, event: kernel.request}

    app.logout.listener:
        class: App\EventListener\LogoutListener

    App\Security\Voter\ForumDiscussionVoter:
        tags:
            - { name: security.voter }

    App\Security\Voter\ForumCommentaireVoter:
        tags:
            - { name: security.voter }

    lre_platform.curentuser:
        class: App\Form\ConversationUserType
        arguments:
            - "@security.token_storage"
        tags: [{ name: form.type }]
xiidea_easy_audit:
    resolver: xiidea.easy_audit.default_event_resolver                             #Optional
    #audit_log_class : MyProject\Bundle\MyBundle\Entity\AuditLog                    #Required
    doctrine_event_resolver : xiidea.easy_audit.default_doctrine_event_resolver    #Optional
    default_logger : true                                                          #Optional

    #user property to use as actor of an event
    #valid value will be any valid property of your user class ~
    user_property : username                                               #Required

    doctrine_objects :                                                          #Optional
        App\Entity\User : [created, updated, deleted]
        App\Entity\ForumDiscussion : [created, updated, deleted]
        App\Entity\ForumCommentaire : [created, updated, deleted]

    #List all events you want to track  (Optional from v1.2.1 you can now use subscriber to define it)
    events :                                                                      #Optional
        - security.interactive_login
        - security.authentication.failure : user.event_resolver
       #- //More event

    logger_channel:
        xiidea.easy_audit.logger.service: ["info", "debug"]
        file.logger: ["!info", "!debug"]
